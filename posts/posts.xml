
<posts>
    <post>
        <post_id>reflections_on_workshops</post_id>
        <title>Reflections on creating workshops on text analysis</title>
        <author>Devin J. Cornell</author>
        <date>Jan 12, 2021</date>
        <header>

Last month I did a workshop on text analysis in Python for a new computational social science group that several of us started at Duke Sociology ([workshop materials](https://github.com/devincornell/workshops/tree/master/duke_css_workshop_11-08-21)). As I created the workshop materials, I had two thoughts: **(1)** most text analysis projects require essentially the same set of steps. The key is to come up with a system and design pattern that works for you. **(2)** There aren’t many new algorithms for text analysis in the social sciences. Most algorithms we've picked up are simply more efficient or slightly different variations of very old algorithms. 

        </header>
        <body>
***Most text analysis projects require the same steps.*** By this I mean that most projects require the same or similar boilerplate tasks: preprocessing might involve fixing spelling issues or removing artifacts from original texts; tokenization involves some decisions about which tokens to include, how to deal with named entities, stopword removal, or hyphenation collapsing; document representation storage involves placing the parsed dataset into a database (plug for my package doctable), spreadsheet, pickled file, or some other storage medium that can be accessed. Then an algorithm operates on those document representations to create models, which are again stored in a database or other file for creating visualizations or running statistical models. There may be more aspects to this: hand-coding, metadata analysis, etc tend to be pretty important - but the exceptions are rare.

The point of learning these tools is to develop a series of design patterns. Most of us (speaking to social scientists here) are not software engineers, nor have we ever even been paid to write code that someone else will read or use. If we were, we would know that design patterns in code are all about predictability. Despite the incredibly large range of possible algorithm designs that could be used, the software engineer seeks to be consistent: consistent project structure, consistent design architecture, and even consistent use of syntax for basics like loops and conditionals. Someone has to read that code, so the goal is to make it as easily understood as possible. For us, we are (often) the only ones to read our code. So learning to write research code is about developing our way of doing the same boilerplate tasks and organizing projects in a way that we can recognize easily in the future.

***There aren’t that many new tools for text analysis in the social sciences.*** Let'’'s start with an easy one: Latent Dirichlet Analysis (LDA). This one algorithm spurred on a (perceived) revolution of social scientists doing text analysis for interpretation. It hit everywhere: sociology (see this [Poetics special issue](https://www.sciencedirect.com/journal/poetics/vol/41/issue/6)), corpus linguistics, and the digital humanities especially. Right now, Word2Vec is *HOT*. Same deal, different algorithm. Now, I’m not against this: in fact, I’ve used both of these tools in research projects, and I think they can be incredibly useful and provide important insights. My argument is not that they are not useful – only that they are not particularly novel in the ways that social scientists use them.

While LDA has by become by-far the most popular topic modeling algorithm, it does pretty much the same thing as its matrix factorization equivalent Nonnegative Matrix Factorization (NMF). They both start with the same model of the texts: documents are bags of words represented as rows in a document-term matrix. NMF is similar to Singular Value Decomposition (SVD) except that it works on matrices with only positive entries. The thing is, NMF is really old. For whatever reason, it was LDA that spurred interest in topic modeling for the social sciences. Same thing goes for word embeddings. While Word2Vec became hugely possible, subsequent works showed that a simple Pointwise Mutual Information (PMI) calculation based on word frequency with SVD could produce results similar to those from Word2Vec, but PMI-SVD has been around for a really long time. With the exception of parsetree and named entity extraction, I’m not totally convinced that we’ve seen anything new that really changes the way we can analyze texts.

If most text analysis pipelines are very similar and we’re using basically the same tools as we’ve had for the last few decades, where does that leave text analysis researchers? It leaves us with substance. The fact that these algorithms are so readily available and we have so many tools for working with texts means that we can focus less on methods and more on substantive analyses. In my opinion, the value in doing computational text analysis is more than the cool factor: we can answer classical questions that were difficult to answer before. In an increasingly digital society the study of digital texts has never been so important. We just have to be willing to ask the right questions before we pick up new tools.

        </body>
    </post>

    <post>
        <post_id>opened_nss_docs</post_id>
        <title>New repo for cleaned NSS documents</title>
        <author>Devin J. Cornell</author>
        <date>Dec 3, 2019</date>
        <header>
I created a [public GitHub repo](https://github.com/devincornell/nssdocs) to share a cleaned version of the US National Security Strategy documents in plain text. It is a nice dataset to use for text analysis demos, and you can use the [`download_nss` function](https://github.com/devincornell/nssdocs/blob/master/example_download.py) to download the docs from the public repo directly in your code.
        </header>
        <body>

I generated these by copy/pasting the pdf text into plain text and doing some cleaning like special character conversion and some spell-checking. Paragraphs in the text are separated by two newlines, and all paragraphs appear on the same line.

The choice of NSS documents was motivated by one of my all-time favorite articles co-authored by my former advisor John Mohr, Robin Wagner-Pacifici, and Ronald Breiger. In addition to the documents analyzed in that piece, I also copy/pasted text from the Trump 2017 NSS document. Each presidential administration since 1987 is required to produce at least one document per term, so you can easily compare the documents by administration or party. 

Mohr, J. W., Wagner-Pacifici, R., and Breiger, R. L. (2015). *Toward a computational hermeneutics.* Big Data and Society, (July–December), 1–8. ([link](https://journals.sagepub.com/doi/full/10.1177/2053951715613809))
        </body>
    </post>

    <post>
        <post_id>ucsb_instructional_development_grant</post_id>
        <title>UCSB Instructional Development Grant</title>
        <author>Devin J. Cornell</author>
        <date>April 11, 2019</date>
        <header>
John Mohr and I recently received a grant for undergraduate instructional development aimed at creating a tool for non-programmers to run and analyze LDA and NMF topic models on a provided set of texts. We chose to make this tool accessable to non-coders so that it can be integrated into general sociology courses where most students have very little technical experience. The tool generates topic-token and document-topic distributions as an excel spreadsheet, allowing students to run analyses and generate figures from within an interface they may be familiar with. The tool uses a command-line interface and can be installed using the command [`pip install easytext`](https://pypi.org/project/easytext/) ([github repo](https://github.com/devincornell/easytext)).
        </header>
        <body>
The command line interface is particularly focused on generating spreadsheets that students can then view and manipulate in a spreadsheet program like Excel or LibreOffice. Students can perform interpretive analysis by going between EasyText output spreadsheets and the original texts, or feed the output into a quantitative analysis program like R or Stata. The program supports features for simple word counting, noun phrase detection, Named Entity Recognition, noun-verb pair detection, entity-verb detection, prepositional phrase extraction, basic sentiment analysis, topic modeling, and the GloVe word embedding algorithm.

While there are debates about the role of topic modeling and other algorithmic approaches to text analysis requiring interpretation, our undergraduate students have shown enthusiasm and diligence in considering the limitations and strengths of such tools (see an example of a student I mentored). In many ways, their experiences with text analysis algorithms have forced them to think beyond the familiarity of p-values and confidence intervals to establish different kinds of patterns in the social world – ones that may be partially out-of-reach with classical sociological research methods. And in this process, they are forced to consider the promises and pitfalls of using these algorithms for analyses.

See the [README](https://github.com/devincornell/easytext/blob/master/README.md) and [Command Reference](https://github.com/devincornell/easytext/blob/master/docs/Command_Reference.md) pages for usage examples.

As an example use case, consider a time when you have a spreadsheet of document names and texts called “mytextdata.xls”. Let’s assume that the column name of document names is “title” and the column of texts is simply “text”. To run a topic model of this text data with 10 topics that outputs to “mytopicmodel.xls”, we would use the following command:

    python -m easytext topicmodel -n 10 mytextdata.xls --doclabelcol "title" --textcol "text" mytopicmodel.xls

The topic model output spreadsheet contains four sheets: `doc_topic`, `topic_words`, `doc_summary`, and `topic_summary`. ![easytext spreadsheet example](https://storage.googleapis.com/public_data_09324832787/easytext_example_spreadsheet.png)

While `doc_topic` contains rows as documents and columns as topic probabilities and `topic_words` contains topics as words and word probabilities as columns, the `doc_summary` and `topic_summary` sheets are meant to assist with interpretation; the topics most closely associated with each document and the words most closely associated with each topic, respectively.

Any topic model interpretation of course relies on referring back to the text of the original documents themselves, but this spreadsheet is designed to help with the process of linking the statistical topic model with the content and form of texts.

Further documentation is needed to push this into an instructional tool, but this is a good first step towards that end.
        </body>
    </post>

    <post>
        <post_id>topic_modeling_for_undergrads</post_id>
        <title>Topic Modeling for Undergraduate Sociology Students</title>
        <author>Devin J. Cornell</author>
        <date>December 30, 2017</date>
        <header>
This Fall, John Mohr and I ran a pilot program to teach Sociology undergraduates how to use topic modeling in courese projects. The pilot program lasted 4 weeks and students were asked to prepare a text corpus of approximately 100 documents using LexisNexis (or copy-paste from the web) and perform analysis using Excel or Google Sheets. Past mentoring projects of both John and I showed that undergraduates can come up with some pretty creative ways to use these computational analysis tools, even if they can'’'t write the code to do it themselves.
        </header>
        <body>
Beyond the technical, the most challenging part of this work is getting students to think about what information they can get from large corpora and how to use the tools to answer questions of interest. It is clear that the era of Big Data and access to internet has changed the way social processes occur on a large scale (think Fake News), so we need to train social scientists to use new tools and think about data differently.

![Topic presence in NYT corpus](https://storage.googleapis.com/public_data_09324832787/blog_topicmodel_topic_presence_nyt.png)

Researchers like John and I are excited about the new questions we can answer about these tools, but I've been realizing that it's not so easy to explain how to analyze 100 documents using algorithms that to them are 'black boxes'. Part of this involves the emphasis on a loose coupling between theory and method, and part of it relates to theorizing about the media being analyzed. I’m thinking that few undergraduates are immediately prepared to study news corpora because it'’'s not something students are used to exploring manually as 'close readers'. Additionally, there are technical challenges like construction of corpus and use of Excel that add curvature to the learning barrier.

Our approach was to have students create a corpus of interest using LexisNexis, send it to me so I could output a topic model as a spreadsheet, then use Excel to aid in qualitative analysis and generate quantitative measures from the data as a comparison between sources or over time. We thought that it would be a good idea to provide an example analysis that students could walk through, so I generated two documents to guide students through (1) corpus construction and (2) analysis using news about Betsy DeVos as an example. We wanted the document to explain not only methodologically how, but how to think about the data at each stage of the analysis.

[Preparing Your Corpus PDF Document](https://storage.googleapis.com/public_data_09324832787/blog_instructions_for_preparing_your_corpus.pdf)

The first document about corpus construction has three parts detailing (1) what a corpus looks like on a computer, (2) how to build a corpus by downloading files from LexisNexis, and (3) how to build a corpus from an arbitrary news website by copy/pasting. I look at text files as documents, and have students build a corpus from simply copy-pasting text from downloaded LexisNexis search results or web pages. This is arguably the simplest approach to this type of analysis and also perhaps the most time consuming on a per-document basis. I think it is appropriate for teaching purposes because students won’t reach memory or speed limitations while working with the data on their personal computers, and they can become intimately familiar with the texts as a practice for using the methods.

This is a document word cloud generated from https://www.jasondavies.com/wordcloud/. I encouraged students to try quickly reading through documents this way.

![Betsy DeVoss Word Cloud](https://storage.googleapis.com/public_data_09324832787/blogpost_devoss_wordcloud.png)

I then performed the analysis using some of the command line topic modeling tools I built. The library relies on downloaded nltk corpora for things like stopwords and requires dependencies that users likely need to install, so I chose to simply run my code that would output a spreadsheet for them. If interested, you can see the scripts that I used from the command line lda.py and nmf.py. In the future, I’d like to build semanticanalysis into an installable library that users can access using pip. I’d also build in `nltk.download()` functions as needed or maybe even switch to a different text analysis library for that step (I’m not fond of Java on which nltk is based). In addition to topic models, I also ran the simplest type of sentiment analysis using word banks: I used the python empath library for this. It is essentially a collection of topics whos contents are uniformly distributed over manually-selected words. Among their sentiment categories are `positive_emotion` and `negative_emotion` that I encouraged students to use, but they could use any of the other categories as well.

[TopicModel Analysis Guide PDF](https://storage.googleapis.com/public_data_09324832787/blog_topicmodel_analysis.pdf)

My second document details how to do different kinds of analysis using the topic model spreadsheet or sentiment analysis spreadsheets. The topic model spreadsheet contains topic content (first 20 words) on the first sheet, and a topic-document matrix on the second sheet. I then give a systematic method for interpreting each of the topics: (1) analyze the topic word contents and develop hypotheses about what each topic might be tracing through the data, then (2) sort documents by presence of that topic, and read through the first 10 or more documents to narrow or construct new hypotheses for topic representation. Topics can trace different styles, contents, or modes of discourse as they relate to different corpora and types of documents, so it is important to recognize what they mean within a specific corpus. After the topics are thoroughly examined, quantitative analysis can be performed to compare news sources, time periods, and topics or topic collections in the data. Questions like topic presence are only meaningful with appropriate interpretations, but can provide insightful results if effort is put into the process.

This analysis compares the relative presence of topics in each of two subcorpora. We can see that topic 9 dominates topic 2 more in the Daily News than it does in the New York Times. From the table (and other types of charts), we can also see that both topics 2 and 9 occur much more in the NYT than DN.

![NYT Corpus Topic Prevalence Pie Charts](https://storage.googleapis.com/public_data_09324832787/blogpost_NYT_corpus_pie_charts.png)

I would say we received a lot of variation in the effort students were willing to put into the projects. Ultimately, I’d say that most students enjoyed it, even if they were at the end still a little confused about how the process works (perhaps in part due to the fact that I generated the topic models for them). Four weeks is far too short for a proper pilot program, but the results were well worth the effort. At the very least the project had the effect of opening students’ minds as to the types of analyses that can be performed with large corpora and new questions that can be asked using these tools.

I also encouraged the interpretation of topics by calculating document correlations with some of the empath sentiment categories that are easy to interpret. This table shows that T9 might be related to banking but all other relationships seem implausible.

![Empath Prevalence](https://storage.googleapis.com/public_data_09324832787/blogpost_empath_prevalence.png)

From my end, I think my biggest challenge is to demonstrate more thoroughly the link between theory and method: more than merely describing the weak coupling, I need to demonstrate under specific conditions and in specific contexts how and when assumptions may or may not hold to answer questions of interest. This is more difficult than a technical problem because many researchers debate today about these topics. My hope is that by continuing to teach and refine the methods we can improve how we understand the tools and contribute to the broad field of theorists and methodologists involved in these debates.

        </body>
    </post>

    <post>
        <post_id>images_of_austerity</post_id>
        <title>Texts and Images of Austerity in Britain</title>
        <author>Devin J. Cornell</author>
        <date>December 30, 2017</date>
        <header>
Last October I visited Erlangen, Germany to attend a workshop set up by Dr. Tim Griebel and Prof. Dr. Stefan Evert called “Texts and Images of Austerity in Britain. A Multimodal Multimedia Analysis”. Tim and Stefan are leading this ongoing project aimed at analyzing 20k news articles from The Telegraph and The Guardian starting in 2010 and leading up to Brexit. I’m working alongside 21 other researchers with backgrounds in discourse analysis, corpus linguistics, computational linguistics, multimodal analysis, and sociology to explore discourse between the two news sources across time from different perspectives.
        </header>
        <body>
![Images of austerity news headlines](https://storage.googleapis.com/public_data_09324832787/blogpost_images_of_austerity.png)

Comparison of front pages of The Guardian and The Daily Telegraph after the Greek people voted to reject austerity measures imposed by the IMF.

This event was a great opportunity to learn from experienced corpus linguists (CL) and discourse analysis scholars from different countries with different academic backgrounds. I found it surprisingly difficult to jump into UK politics without any background, but I learned a lot from listening to presentations and discussions. I spent last summer learning about Colombian politics and assumed the language barrier was the most difficult part of that research, but even in English it took me a while to understand the economic factors involved in the political discussions.

It was fascinating to compare populist movements occurring in the UK with those in the US and Colombia that I’m more familiar with. Last year I attended a preconference on populism at the International Communications Association annual meeting in San Diego, and the general consensus was that populism is a set of styles (repertoires?) and moral backdrops (intuitions?) that politicians use to build support for political positions. My observation is that the exact positions they apply to may vary widely by country. An inclination towards formal practice theories of culture leads me to believe that we can compare and contrast contexts by identifying sets of discursive repertoires and discursive frameworks that tap into deeply held morals and emotions. I’ll be presenting some of my work on Colombia from both theoretical and empirical perspectives using a combination of interviews and Twitter data at the 2018 Pacific Sociological Association annual meeting. That work will be shared after the proceedings are posted.

Another big impression was the surprising divide between the corpus CL community and other fields like sociology, communications, and the digital humanities who study large corpora of texts using computational methods. While I’m familiar with the topic modeling and LSA approaches, the linguists I met use collocations, POS taggers, stemming, lemmatization and other non-machine learning approaches to text analysis. I expressed my surprise to one of the other workshop attendees and they pointed out that the pushback against ML from CL was reflected in a presentation Dr. Andrew Hardie (also a workshop attendee) gave at the 2017 Corpus Linguistics conference that aimed to critique topic modeling – I wrote a response to that critique [here]().

This workshop also forced me to consider the contributions that sociology could have to computational text analysis. My thought is that sociologists can help to place the media into a larger societal context by exploring economic, cultural, and organizational factors that affect and are affected by the media. Discourse analysis, digital humanities, and communications all examine the causes, content, and effects of media on people, but I think sociology has the opportunity to explore this at a collective scale. Cultural analysis could further contribute by looking at the moral under-girding of political rhetoric and how it relates to the construction of social categories that people understand and navigate through.

Overall, this workshop was a great opportunity for me to meet new people and be exposed to totally different approaches to computational text analysis and broader discourse theory. I’m excited to see where these collaborations will lead!

EDIT: [the end result was finally published!](https://www.taylorfrancis.com/books/multimodal-approaches-media-discourses-tim-griebel-stefan-evert-philipp-heinrich/e/10.4324/9780367332907) 

        </body>
    </post>




</posts>

